@page "/products"
@inject ECommerceService ECommerceService
@using ECommerceUI.Models
@using Microsoft.JSInterop

<h3>Products</h3>

<button class="btn btn-primary" @onclick="ShowCreateModal">Create New Product</button>

@if (isLoading)
{
    <p>Loading products...</p>
}
else if (products == null || products.Count == 0)
{
    <p>No products available.</p>
}
else
{
    <table class="table table-striped mt-3">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@product.CategoryName</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => ShowEditModal(product)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentProduct" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText class="form-control" @bind-Value="currentProduct.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Price</label>
                            <InputNumber class="form-control" @bind-Value="currentProduct.Price" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <InputSelect class="form-control" @bind-Value="currentProduct.CategoryId">
                                <option value="">-- Select Category --</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Product> products;
    private List<Category> categories;
    private bool showModal = false;
    private string modalTitle;
    private Product currentProduct = new Product();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadCategories();
    }

    private async Task LoadProducts()
    {
        try
        {
            isLoading = true;
            products = await ECommerceService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., show notification)
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await ECommerceService.GetCategoriesAsync();
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private void ShowCreateModal()
    {
        currentProduct = new Product();
        modalTitle = "Create New Product";
        showModal = true;
    }

    private void ShowEditModal(Product product)
    {
        currentProduct = new Product
        {
            Id = product.Id,
            Name = product.Name,
            Price = product.Price,
            CategoryId = product.CategoryId,
            CategoryName = product.CategoryName
        };
        modalTitle = "Edit Product";
        showModal = true;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (currentProduct.Id == 0)
            {
                await ECommerceService.CreateProductAsync(currentProduct);
            }
            else
            {
                await ECommerceService.UpdateProductAsync(currentProduct.Id, currentProduct);
            }

            showModal = false;
            await LoadProducts();
        }
        catch (Exception ex)
        {
            // Handle exceptions
            Console.WriteLine($"Error saving product: {ex.Message}");
        }
    }

    private async Task DeleteProduct(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete product with ID {id}?");
        if (confirmed)
        {
            try
            {
                await ECommerceService.DeleteProductAsync(id);
                await LoadProducts();
            }
            catch (Exception ex)
            {
                // Handle exceptions
                Console.WriteLine($"Error deleting product: {ex.Message}");
            }
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
}
